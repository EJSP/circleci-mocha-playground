version: 2.1

parameters:
  TEST_ENV:
    type: string
    default: fake_test_env
  # CIRCLE_BUILD_URL:
  #   type: string
  #   default: ${CIRCLE_BUILD_URL}
  # CIRCLE_JOB:
  #   type: string
  #   default: ${CIRCLE_JOB}
  # CIRCLE_JOB2:
  #   type: string
  #   default: "${CIRCLE_JOB}"
  # CIRCLE_BRANCH:
  #   type: string
  #   default: ${CIRCLE_BRANCH}
  TEXT:
    type: string
    default: CIRCLE_JOB ${CIRCLE_JOB} CIRCLE_BRANCH ${CIRCLE_BRANCH} CIRCLE_BUILD_URL ${CIRCLE_BUILD_URL}

orbs:
  node: circleci/node@5.0.0

commands:
  setup_1:
    description: "checkout, install mocha test dependencies"
    steps:
      - checkout
      - node/install-packages
  
  setup_env:
    # define env vars at runtime
    steps:
      - run: echo "<< pipeline.parameters.TEST_ENV >>"
      - run: echo "<< pipeline.parameters.TEXT >>"
      - run: echo CIRCLE_JOB "${CIRCLE_JOB}" CIRCLE_BRANCH "${CIRCLE_BRANCH}" CIRCLE_BUILD_URL "${CIRCLE_BUILD_URL}"
      - run: echo export TEXT_VAR=\"<< pipeline.parameters.TEXT >>\" >> "$BASH_ENV"
      - run: echo export TEST_ENV_VAR=\"<< pipeline.parameters.TEST_ENV >>\" >> "$BASH_ENV"
      - run: echo export TEXT_VAR2=\"CIRCLE_JOB $CIRCLE_JOB CIRCLE_BRANCH $CIRCLE_BRANCH CIRCLE_BUILD_URL $CIRCLE_BUILD_URL\" >> "$BASH_ENV"
      - run: source "$BASH_ENV"
      - run: echo TEXT_VAR "$TEXT_VAR"
      - run: echo TEXT_VAR2 "$TEXT_VAR2"

  config_test:
    description: "test writing fake firebase service account creds from Circle env vars"
    steps:
      - run: ls -l | awk '{print $5, $9}'
      - run: echo $FAKE_ENV_JSON > ./fake_env.json
      - run: ls -l | awk '{print $5, $9}'

  run_tests:
    description: "see if creds file exists, run tests"
    steps:
        - run: ls -l | awk '{print $5, $9}'
        - run: npm run mocha

  slack_1:
    description: "Test out the slack spambot, part 1"
    steps:
      - run: 
          name: echo bash env vars from setup_env
          command: |
            source "$BASH_ENV"
            echo TEXT_VAR "$TEXT_VAR"
            echo TEXT_VAR2 "$TEXT_VAR2"
            echo TEST_ENV_VAR "$TEST_ENV_VAR"
      - run: 
          name: slack_1 circle build vars as bash env var $TEXT_VAR2 ?
          command: |
            curl -X POST "$TEST_WEBHOOK_NOTIF_URL" \
            -H 'Content-type: application/json' \
            -d '{"TEXT": "$TEXT_VAR2"}'
        
        # -d '{ "TEXT": "example slack_1 text, pipeline params: TEST_ENV << pipeline.parameters.TEST_ENV >> CIRCLE_JOB << pipeline.parameters.CIRCLE_JOB >> CIRCLE_JOB2 << pipeline.parameters.CIRCLE_JOB2 >>" }'

  slack_2:
    description: "Test out the slack spambot, part 2"
    steps:
      - run: echo 'example slack_2 text TEST_ENV_VAR $TEST_ENV_VAR TEXT_VAR2 $TEXT_VAR2'
      - run:
  #         #name: Notify ir_pipeline_team_test_notifs Slack channel
          name: slack_2 -d TEXT as "example slack_2 text TEST_ENV_VAR $TEST_ENV_VAR TEXT_VAR2 $TEXT_VAR2"
          when: always #on_success
          command: |
              curl -X POST "$TEST_WEBHOOK_NOTIF_URL" \
              -H 'Content-type: application/json' \
              -d '{ "TEXT": "example slack_2 text TEST_ENV_VAR $TEST_ENV_VAR TEXT_VAR2 $TEXT_VAR2" }'
  # slack_3:
  #   description: "Test out the slack spambot, part 2 the 2nd"
  #   steps:
  #     - run: echo "$TEXT"
  #     - run: |
  #         curl -X POST "$TEST_WEBHOOK_NOTIF_URL" \
  #         -H 'Content-type: application/json' \
  #         -d { "TEXT": "$TEXT" }


jobs:
  circle_config_test: 
    executor:
      name: node/default
      tag: '16.16.0'
    steps:
      # - setup_1
      # - config_test
      # - run_tests
      # - run: echo $TEXT
      # - slack_1
      - setup_env
      - slack_1
      - slack_2

workflows:
  build_test:
    jobs:
      - circle_config_test
